generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  username    String
  createdAt   Int
  userId      String       @id @unique
  privacy     Privacy?
  questions   Question[]
  discussions Discussion[]
  usages      Usage?
  votes       Vote?
  tips        Tips?
  isPremium   Boolean      @default(false)
}

model Question {
  id        String @id @unique @default(cuid())
  question  String @default("")
  answer    String @default("")
  createdAt Int    @default(0)
  repliedAt Int    @default(0)
  user      User   @relation(fields: [userId], references: [userId], onDelete: Cascade)
  userId    String
}

model Usage {
  id     String   @id @default(cuid())
  usage  Int      @default(20)
  max    UsageMax @default(FREE)
  user   User     @relation(fields: [userId], references: [userId], onDelete: Cascade)
  userId String   @unique
}

model Privacy {
  collectChat Boolean @default(false)
  autoDelete  Boolean @default(false)
  user        User    @relation(fields: [userId], references: [userId], onDelete: Cascade)
  userId      String  @id @unique
}

enum UsageMax {
  FREE
  PREMIUM
}

enum Locale {
  id // Indonesian
  en_US // English
  en_GB // English
  bg // Bulgarian
  zh_CN // Chinese
  zh_TW // Chinese
  hr // Croatian
  cs // Czech
  da // Danish
  nl // Dutch
  fi // Finnish
  fr // French
  de // German
  el // Greek
  hi // Hindi
  hu // Hungarian
  it // Italian
  ja // Japanese
  ko // Korean
  lt // Lithuanian
  no // Norwegian 
  pl // Polish
  pt_BR // Portuguese
  ro // Romanian
  ru // Russian
  es_ES // Spanish 
  sv_SE // Swedish
  th // Thai 
  tr // Turkish
  uk // Ukrainian
  vi // Vietnamese
}

model Vote {
  id        String  @id @default(cuid())
  count     Int     @default(0)
  lastVote  String  @default("none")
  firstVote String  @default("none")
  allVotes  Json    @default("[]")
  active    Boolean @default(true)
  user      User    @relation(fields: [userId], references: [userId], onDelete: Cascade)
  userId    String  @unique
}

model Discussion {
  id            String    @id @default(cuid())
  createdAt     Int       @default(0)
  lastMessageAt Int       @default(0)
  messages      Message[]
  writing       Boolean   @default(false)
  active        Boolean   @default(true)
  title         String    @default("default")
  context       String    @default("default")
  channelId     String    @default("default") @unique
  userId        String
  user          User      @relation(fields: [userId], references: [userId], onDelete: Cascade)
}

model Message {
  id           String     @id @default(cuid())
  createdAt    Int        @default(0)
  message      String     @default("Lorem imspu mipsu")
  isBot        Boolean    @default(false)
  discussion   Discussion @relation(fields: [discussionId], references: [id], onDelete: Cascade)
  discussionId String
}

model Tips {
  id                String  @id @default(cuid())
  chatPremiumSaveIt Boolean @default(true)
  userId            String  @unique
  user              User    @relation(fields: [userId], references: [userId], onDelete: Cascade)
}
